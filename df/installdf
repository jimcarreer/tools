#!/bin/bash
set -e

# Note not done by this tool:
# sudo apt install libsdl1.2debian libsdl-image1.2 libsdl-ttf2.0-0 libgtk2.0-0 libopenal1 libsndfile1 libncursesw5

######################################################################################################
#
# General settings
#
VERSION_DF="47_05"                  # Dwarf Fortress version
VERSION_DH="0.47.05-r1"             # DF Hack version
VERSION_GP="47.05"                  # Mayday Graphics Pack version
VERSION_TW="6.xx"                   # Version of the TWBT plugin to install with DFHack
VERSION_DT="41.2.2"                 # Version of Dwarf Therapist to install
INSTALL_TO=~/games                  # Where to install dwarf fortress
SETTING_DR=~/tools/df/settings      # A place where I store settings that I want to keep
SCRIPTS_DR=~/tools/df/scripts       # A place where I store custom hack scripts
WORKING_DR="/tmp/df_${VERSION_DF}"  # Working directory (where files will be downloaded / extracted)
#                                     Warning: this directory is removed recursively in cleanup  
#
######################################################################################################
#
# Constants that shouldn't change much
#
DOWNLOAD_DF="https://www.bay12games.com/dwarves"
DOWNLOAD_DF="${DOWNLOAD_DF}/df_${VERSION_DF}_linux.tar.bz2"

DOWNLOAD_DH="https://github.com/DFHack/dfhack/releases/download"
DOWNLOAD_DH="${DOWNLOAD_DH}/${VERSION_DH}/dfhack-${VERSION_DH}-Linux-64bit-gcc-7.tar.bz2"

DOWNLOAD_GP="https://github.com/DFgraphics/Mayday/archive"
DOWNLOAD_GP="${DOWNLOAD_GP}/${VERSION_GP}.zip"

DOWNLOAD_TW="https://github.com/thurin/df-twbt/releases/download"
DOWNLOAD_TW="${DOWNLOAD_TW}/${VERSION_DH}/twbt-${VERSION_TW}-linux64-${VERSION_DH}.zip"

DOWNLOAD_DT="https://github.com/Dwarf-Therapist/Dwarf-Therapist/releases/download"
DOWNLOAD_DT="${DOWNLOAD_DT}/v${VERSION_DT}/DwarfTherapist-v${VERSION_DT}-linux-x86_64.AppImage"
DOWNLOAD_PT="https://raw.githubusercontent.com/Dwarf-Therapist/Dwarf-Therapist"
DOWNLOAD_PT="${DOWNLOAD_PT}/master/dist/ptrace_scope/patch_df_ptracer"

DOWNLOAD_IC="https://raw.githubusercontent.com/Zorgatone/dwarf_fortress-icons/master/iconset.iconset"
DOWNLOAD_IC="${DOWNLOAD_IC}/icon_256x256%402x.png"

MEM_LAYOUTS=~/.local/share/dwarftherapist/memory_layouts/linux
INST_VER_DR="${INSTALL_TO}/df_${VERSION_DF}"
DEP_PKGLIST="libsdl1.2debian libsdl-image1.2 libsdl-ttf2.0-0 libgtk2.0-0 libopenal1 libsndfile1 libncursesw5 libcanberra-gtk-module"


DESKTOP_ENTRY=$(cat <<GTK_DESKTOP_ENTRY
[Desktop Entry]
Name=Dwarf Fortress
Version=${VERSION_DF}
Exec=${INSTALL_TO}/df/dfhack
Icon=${INSTALL_TO}/df/icon.png
Terminal=true
Type=Application
Categories=Games;
GTK_DESKTOP_ENTRY
)
DESKTOP_ENTRY_LOCATION=~/.local/share/applications/dwarf.desktop

DESKTOP_ENTRY_DT=$(cat <<GTK_DESKTOP_ENTRY
[Desktop Entry]
Name=Dwarf Therapist
Version=${VERSION_DT}
Exec=${INSTALL_TO}/df/dt.appimage
Icon=${INSTALL_TO}/df/icon.png
Terminal=false
Type=Application
Categories=Games;
GTK_DESKTOP_ENTRY
)
DESKTOP_ENTRY_LOCATION_DT=~/.local/share/applications/dwarf-therapist.desktop

WGET="wget -q --show-progress "
TARZ="tar --extract --bzip2"
UZIP="unzip -o"
#
######################################################################################################

__IPHASE__=""

function set_phase {
  __IPHASE__=$(printf "%-19s" "${1}")
  local TWIDTH="$(tput cols)"
  local PADDIN="$(printf '%0.1s' ={1..500})"
  local PFORMT='%*.*s %s %*.*s\n'
  echo $(printf "${PFORMT}"  0 "$(((TWIDTH-2-${#1})/2))" "$PADDIN" "$1" 0 "$(((TWIDTH-1-${#1})/2))" "$PADDIN")
}

function debug {
  echo "$1" | sed -e 's/^/['"${__IPHASE__}"'] /'
}

function on_exit {
  local STATUS=$?
  if [[ ! "${STATUS}" -eq "0" ]]; then
    local LAST_PHASE="${__IPHASE__}"
    set_phase "Install Failure"
    debug "There was an install error (status: ${STATUS}) during the phase ${LAST_PHASE}"
  else
    set_phase "Summary"
    debug "Install completed without errors"
  fi
  cleanup
}
trap on_exit EXIT

function runcmd {
  debug "Running $1"
  $1 2>&1 | sed -e 's/^/['"${__IPHASE__}"'] /'
  return "${PIPESTATUS[0]}"
}

function download {
  runcmd "${WGET} $1 -O $2"
  local RET=$?
  echo ""
  return $RET
}

function dump_env {
  set_phase "Environment Dump"
  debug "VERSION_DF=${VERSION_DF}"
  debug "VERSION_DH=${VERSION_DH}"
  debug "VERSION_GP=${VERSION_GP}"
  debug "VERSION_TW=${VERSION_TW}"
  debug "VERSION_DT=${VERSION_DT}"
  debug "INSTALL_TO=${INSTALL_TO}"
  debug "WORKING_DR=${WORKING_DR}"
  debug "DOWNLOAD_DF=${DOWNLOAD_DF}"
  debug "DOWNLOAD_DH=${DOWNLOAD_DH}"
  debug "DOWNLOAD_GP=${DOWNLOAD_GP}"
  debug "DOWNLOAD_TW=${DOWNLOAD_TW}"
  debug "DOWNLOAD_DT=${DOWNLOAD_DT}"
  debug "DOWNLOAD_PT=${DOWNLOAD_PT}"
  debug "DOWNLOAD_IC=${DOWNLOAD_IC}"
  debug "INST_VER_DR=${INST_VER_DR}"
}

function pre_install {
  # Pre install setup tasks
  set_phase "Pre-install Setup"
  runcmd "mkdir -p ${INSTALL_TO}"
  runcmd "mkdir -p ${WORKING_DR}"
  runcmd "mkdir -p ${WORKING_DR}/df"
  runcmd "sudo apt-get install -y ${DEP_PKGLIST}"
}

function install_df {
  # Download and installed Dwarf Fortress
  set_phase "Install DF"
  local OUTPUT="${WORKING_DR}/dwarf_fortress.tar.bz2"
  download "${DOWNLOAD_DF}" "${OUTPUT}"
  runcmd "${TARZ} --file ${OUTPUT} --directory ${WORKING_DR}/df"
  runcmd "mv ${WORKING_DR}/df/df_linux/ ${INST_VER_DR}"
  # Do NOT use the bundled libstdc++ library, it causes issues
  # launching the game.  Removing it forces the game to use the
  # system installed version of this lib
  runcmd "rm ${INST_VER_DR}/libs/libstdc++.so.6"
}

function install_df_hack {
  # Download and install DFHack
  set_phase "Install DFHack"
  local OUTPUT="${WORKING_DR}/df_hack.tar.bz2"
  download "${DOWNLOAD_DH}" "${OUTPUT}"
  runcmd "${TARZ} --file ${OUTPUT} --directory ${INST_VER_DR}"
  # By default dhack just uses this file anyway so copy it to shut up the warning
  runcmd "mv ${INST_VER_DR}/dfhack.init-example ${INST_VER_DR}/dfhack.init"
}

function install_twbt_plugin {
  # Download and install TWBT plugin DFHack
  set_phase "Install TWBT"
  local OUTPUT="${WORKING_DR}/twbt.zip"
  download "${DOWNLOAD_TW}" "${OUTPUT}" 
  runcmd "${UZIP} ${OUTPUT} -d ${WORKING_DR}/twbt"
  runcmd "cp ${WORKING_DR}/twbt/${VERSION_DH}/*.so ${INST_VER_DR}/hack/plugins/"
  runcmd "cp ${WORKING_DR}/twbt/transparent1px.png ${INST_VER_DR}/data/art/"
  runcmd "cp ${WORKING_DR}/twbt/white1px.png ${INST_VER_DR}/data/art/"
  runcmd "cp ${WORKING_DR}/twbt/shadows.png  ${INST_VER_DR}/data/art/"
}

function install_mayday_pack {
  # Download and install Mayday graphics pack
  set_phase "Install Mayday GFX"
  local OUTPUT="${WORKING_DR}/mayday.zip"
  download "${DOWNLOAD_GP}" "${OUTPUT}" 
  runcmd "${UZIP} ${OUTPUT} -d ${WORKING_DR}/mayday"
  OUTPUT="${WORKING_DR}/mayday/Mayday-${VERSION_GP}"
  runcmd "cp -R ${OUTPUT}/data/art/. ${INST_VER_DR}/data/art/"
  runcmd "cp -R ${OUTPUT}/data/init/. ${INST_VER_DR}/data/init/"
  runcmd "cp -R ${OUTPUT}/raw/graphics/. ${INST_VER_DR}/raw/graphics/"
  runcmd "cp -R ${OUTPUT}/raw/objects/. ${INST_VER_DR}/raw/objects/"
  # Also install TWBT assets
  runcmd "cp -R ${OUTPUT}/data/twbt_art/. ${INST_VER_DR}/data/art/"
  runcmd "cp -R ${OUTPUT}/data/twbt_init/. ${INST_VER_DR}/data/init/"
  runcmd "cp -R ${OUTPUT}/raw/twbt_graphics/. ${INST_VER_DR}/raw/graphics/"
  runcmd "cp -R ${OUTPUT}/raw/twbt_objects/. ${INST_VER_DR}/raw/objects/"
  runcmd "cp    ${OUTPUT}/raw/onLoad_gfx_Mayday.init ${INST_VER_DR}/raw/onLoad_gfx_Mayday.ini"
}

function install_dwarf_therapist {
  set_phase "Install Therapist"
  download "${DOWNLOAD_DT}" "${INST_VER_DR}/dt.appimage"
  runcmd "chmod +x ${INST_VER_DR}/dt.appimage"
  # Necessary for Linux, see:
  # https://github.com/Dwarf-Therapist/Dwarf-Therapist/tree/master/dist/ptrace_scope
  download "${DOWNLOAD_PT}" "${WORKING_DR}/patch_df_ptracer"
  runcmd "chmod +x ${WORKING_DR}/patch_df_ptracer"
  runcmd "${WORKING_DR}/patch_df_ptracer ${INST_VER_DR}/"
  debug "Creating desktop entry @ ${DESKTOP_ENTRY_LOCATION_DT}"
  echo "${DESKTOP_ENTRY_DT}" > ${DESKTOP_ENTRY_LOCATION_DT}
}

function install_gnome_entry {
  # Add a launcher to users apps
  set_phase "Unity Launcher"
  runcmd "ln -s ${INST_VER_DR} ${INSTALL_TO}/df"
  download "${DOWNLOAD_IC}" "${INST_VER_DR}/icon.png"
  debug "Creating desktop entry @ ${DESKTOP_ENTRY_LOCATION}"
  echo "${DESKTOP_ENTRY}" > ${DESKTOP_ENTRY_LOCATION}
}

function custom_settings_and_scripts {
  set_phase "Jim Settings"
  # Turn off music, its beautiful but a little much if you play longer than an hour
  runcmd "sed -i s/\[SOUND:YES\]/[SOUND:NO]/g ${INST_VER_DR}/data/init/init.txt"
  # Intro is also cool, but I've seen it 100 times
  runcmd "sed -i s/\[INTRO:YES\]/[INTRO:NO]/g ${INST_VER_DR}/data/init/init.txt"
  # I do not use the mouse for this game and it only screws things up
  runcmd "sed -i s/\[MOUSE:YES\]/[MOUSE:NO]/g ${INST_VER_DR}/data/init/init.txt"
  # I do need to see FPS though
  runcmd "sed -i s/\[FPS:NO\]/[FPS:YES]/g ${INST_VER_DR}/data/init/init.txt"
  # Cave adaptation is not fun
  runcmd "sed -i /\[CAVE_ADAPT\]/d ${INST_VER_DR}/raw/objects/creature_standard.txt"
  # Stock settings plugin stuff
  runcmd "ln -s ${SETTING_DR}/stocksettings ${INST_VER_DR}/stocksettings"
  # Advanced world generation
  runcmd "rm -f ${INST_VER_DR}/data/init/world_gen.txt"
  runcmd "ln -s ${SETTING_DR}/world_gen.txt ${INST_VER_DR}/data/init/world_gen.txt"
  # Embark profiles
  runcmd "ln -s ${SETTING_DR}/embark_profiles.txt ${INST_VER_DR}/data/init/embark_profiles.txt"
  # Custom scripts
  runcmd "ln -s ${SCRIPTS_DR}/* ${INST_VER_DR}/hack/scripts/"
}


function cleanup {
  set_phase "Cleanup"
  runcmd "rm -rf ${WORKING_DR}"
}


# Main installation steps
dump_env
pre_install
install_df
install_df_hack
install_twbt_plugin
install_mayday_pack
install_dwarf_therapist
install_gnome_entry
custom_settings_and_scripts
